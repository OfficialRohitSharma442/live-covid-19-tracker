{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","showDataOnMap","data","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","height","width","borderRadius","backgroundSize","FontWeight","fontSize","sortData","Data","sortedData","sort","a","b","Map","contries","zoom","TileLayer","url","attribution","Table","bulidChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","isgreen","useState","setData","useEffect","fetch","then","response","json","fetchData","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","length","datasets","backgroundColor","borderColor","App","setContries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","document","name","iso2","getcontriesData","onCounteryChange","event","CounteryCode","target","Url","FormControl","Select","variant","onChange","MenuItem","src","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ee42b77b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport './InfoBox.css';\r\n\r\nfunction InfoBox({ title, cases, isRed,active,total,...props}) {\r\n  return (\r\n    <Card className={`infoBox ${active && 'infobox__selected'} \r\n     ${isRed && 'infobox__isRed'}`}\r\n    onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        {/* title */}\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n        {/* number of cases */}\r\n        <h2 className={`infoBox__cases ${!isRed && 'infobox__casesgreen'}`}>{cases}</h2>\r\n        <Typography className=\"infobox__totle\" color=\"textSecondary\">{total} Total</Typography>\r\n        {/* total */}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport {Circle,Popup} from \"react-leaflet\";\r\nimport numeral from 'numeral';\r\n\r\nconst casesTypeColors={\r\n    cases:{\r\n        hex:\"#CC1034\",\r\n        rgb:\"rgb(204,16,52,0.5)\",\r\n        half_op:\"rgba(204,16,52,0.5)\",\r\n        multiplier:500,\r\n    },\r\n    recovered:{\r\n        hex:\"#7dd71d\",\r\n    rgb:\"rgb(125,215,29)\",\r\n        half_op:\"rgba(125,125,29,0.5)\",\r\n        multiplier:800, \r\n    },\r\n    deaths:{\r\n        hex:\"#fb4443\",\r\n        rgb:\"rgb(125,68,67)\",\r\n        half_op:\"rgba(251,68,67,0.5)\",\r\n        multiplier:2000,\r\n    },\r\n\r\n};\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\nexport const showDataOnMap = (data,casesType='cases') => {\r\n   return(\r\n          data.map(country=>(\r\n       <Circle \r\n        center={[country.countryInfo.lat,country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        radius={ Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier}\r\n        >\r\n\r\n            <Popup>\r\n              <div className=\"info__container\">\r\n                  <div\r\n                  className=\"info__flag\"\r\n                  style={{backgroundImage:`url(${country.countryInfo.flag})`,height:'80px',width:'100%', borderRadius:'8px', backgroundSize: 'cover'}} \r\n                 />\r\n                  <div className=\"info__name\" style={{FontWeight:'bord',fontSize:'30px'}}>{country.country}</div>\r\n                  <div className=\"info__cases\">Cases:{numeral(country.cases).format(\"0.0\")}</div>\r\n                  <div className=\"info__recovered\">Recovered:{numeral(country.recovered).format(\"0.0\")}</div>\r\n                  <div className=\"info__deaths\">deaths:{numeral(country.deaths).format(\"0.0\")}</div>\r\n              </div>\r\n            </Popup>\r\n\r\n        </Circle>\r\n\r\n    ))\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport const sortData =(Data)=>{\r\n    const sortedData = [...Data];\r\n    sortedData.sort((a,b) =>{\r\n        if (a.cases > b.cases){\r\n            return -1;\r\n            }else{\r\n            return 1;\r\n            }\r\n          })\r\n    return sortedData;\r\n}","import React from 'react';\r\nimport \"./Map.css\";\r\nimport {Map as MapLeaflet , TileLayer/* ,Circle,Popup */} from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\n\r\nfunction Map({contries,center,zoom,casesType}) {\r\n    \r\n    return (\r\n        <div className=\"map\">\r\n            <MapLeaflet center={center} zoom={zoom}   >\r\n            <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n          {             \r\n           showDataOnMap(contries,casesType)\r\n           }</MapLeaflet>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({contries}) {\r\n    // debugger;\r\n    return (\r\n        <div className=\"table\">\r\n            {contries.map(({country,cases})=>(\r\n             <tr>\r\n                 <td>{country}</td>\r\n                 <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n             </tr>   \r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React,{useEffect, useState}from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\n  const bulidChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        let newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  };\r\nfunction LineGraph({casesType='cases',className,isgreen}) {\r\n    const [data,setData]= useState({});\r\n     \r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n        .then((response) =>{\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n     let chartData = bulidChartData(data,casesType);\r\n       setData(chartData);\r\n      // console.log(chartData);\r\n        });\r\n        };\r\n        // debugger;\r\n        fetchData();\r\n    },[casesType]);\r\n    const options = {\r\n        legend: {\r\n          display: false,\r\n        },\r\n        elements: {\r\n          point: {\r\n            radius: 0,\r\n          }, \r\n        },\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n          mode: \"index\",\r\n          intersect: false,\r\n          callbacks: {\r\n            label: function (tooltipItem, data) {\r\n              return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n          },\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              type: \"time\",\r\n              time: {\r\n                format: \"MM/DD/YY\",\r\n                tooltipFormat: \"ll\",\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                // Include a dollar sign in the ticks\r\n                callback: function (value, index, values) {\r\n                  return numeral(value).format(\"0a\");\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      };\r\n    \r\n\r\n\r\n     \r\n    return (\r\n        <div className={className }>\r\n            {data?.length > 0 &&(\r\n   <Line\r\n  \r\n   data={{\r\n     datasets: [\r\n       {\r\n         backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n         borderColor: \"#CC1034\",\r\n         data: data,\r\n       },\r\n     ],\r\n   }}\r\n   options={options}\r\n />\r\n            )}\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph;\r\n","import { React, useState, useEffect, } from \"react\";\nimport \"./App.css\";\nimport { MenuItem, FormControl, Select, Card, } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map.js\";\nimport Table from './Table';\nimport { sortData ,prettyPrintStat } from './util';\nimport LineGraph from './LineGraph.js';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [contries, setContries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState(\n    { lat: 26.9124, lng: -40.4796 }\n  );\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType,setCasesType] = useState('cases')\n\ndocument.title=\"Covid 19 tracker\";\n\n  useEffect(() => {\n    fetch(`https://disease.sh/v3/covid-19/all`)\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n  }, [])\n  useEffect(() => {\n    const getcontriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const contries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n            flag: country.countryInfo.flag,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setContries(contries);\n        });\n    };\n    getcontriesData();\n  }, []);\n  const onCounteryChange = async (event) => {\n    const CounteryCode = event.target.value;\n    // console.log(CounteryCode);\n    setCountry(CounteryCode);\n    const Url = (CounteryCode === \"worldwide\")\n      ? `https://disease.sh/v3/covid-19/all`\n      : `https://disease.sh/v3/covid-19/countries/${CounteryCode}`;\n\n    await fetch(Url)\n      .then((response) => response.json())\n      .then(data => {\n        /* set all countery data  */\n        setCountryInfo(data);\n        setMapCenter(data.countryInfo ? [data.countryInfo.lat, data.countryInfo.long] : { lat: 20.5937, lng: 78.96296666 });\n        setMapZoom(4);\n      });\n\n\n\n  };\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"app__left\">\n\n        <div className=\"app_header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCounteryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n              {contries.map((country) => (\n                // eslint-disable-next-line jsx-a11y/alt-text\n                <MenuItem value={country.value}><img className=\"country__flag\" src={country.flag} /> {country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox title=\"Coronavirus cases\"\n          isRed\n          active={casesType === 'cases'}\n          onClick={(e)=> setCasesType('cases') }\n          cases={prettyPrintStat(countryInfo.todayCases)}\n          total={prettyPrintStat(countryInfo.cases)}\n           />\n          <InfoBox title=\"Recovered\" \n             active={casesType === 'recovered'}\n           onClick={(e)=> setCasesType('recovered') }\n          cases={prettyPrintStat(countryInfo.todayRecovered)}\n          total={prettyPrintStat(countryInfo.recovered)}\n           />\n          <InfoBox \n          isRed\n          active={casesType === 'deaths'}\n          title=\"Death\" \n          onClick={(e)=> setCasesType('deaths') }\n          cases={prettyPrintStat(countryInfo.todayDeaths)}\n          total={prettyPrintStat(countryInfo.deaths)}\n           />\n        </div>\n        <Map\n          casesType={casesType}\n          contries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <h3>New cases By country</h3>\n        <Table contries={tableData} />\n        <h3 className=\"app__graphtitle\">{`Worldwide new${casesType}`}</h3>\n\n        <LineGraph className=\"app__graph\" casesType={casesType} />\n\n\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}